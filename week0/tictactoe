"""
Tic Tac Toe Player
"""

from math import inf
import copy

X = "X"
O = "O"
EMPTY = None


def initial_state():
    """
    Returns starting state of the board.
    """
    return [[EMPTY, EMPTY, EMPTY],
            [EMPTY, EMPTY, EMPTY],
            [EMPTY, EMPTY, EMPTY]]


def player(board):
    """
    Returns player who has the next turn on a board.
    """
    count = 0

    for row in board:
        for column in row:
            if column:
                count +=1
    if count % 2 != 0:
        return O
    return X


def actions(board):
    """
    Returns set of all possible actions (i, j) available on the board.
    """
    moves = set()
    for i, row in enumerate(board):
        for j,column in enumerate(row):
            if board[i][j] == EMPTY:
                moves.add((i,j))
    return moves


def result(board, action):
    """
    Returns the board that results from making move (i, j) on the board.
    """
    # check whick player's turn first
    player_now = player(board)

    # check if action is valed
    if action not in actions(board):
        raise NotImplementedError("Action is invalid")

    # deepcopy current board
    result_board = copy.deepcopy(board)

    # modify the result board
    result_board[action[0]][action[1]] = player_now

    return result_board


def winner(board):
    """
    Returns the winner of the game, if there is one.
    """
    # check horizon rows
    for i, row in enumerate(board):
        if row.count(X) == 3:
            return X
        elif row.count(O) == 3:
            return O

    # check Vertical column
    for i, row in enumerate(board):
        for j, column in enumerate(row):
            if board[0][j] == board[1][j] == board[2][j] != None:
                return board[0][j]

    # check diagonals
    if board[0][0] == board[1][1] == board[2][2] != None:
        return board[0][0]
    elif board[0][2] == board[1][1] == board[2][0] != None:
        return board[0][2]

    return None

def terminal(board):
    """
    Returns True if game is over, False otherwise.
    """
    if winner(board) != None:
        return True
    for i, row in enumerate(board):
        for j,column in enumerate(row):
            if board[i][j] == EMPTY:
                return False
    return True


def utility(board):
    """
    Returns 1 if X has won the game, -1 if O has won, 0 otherwise.
    """
    won = winner(board)
    if won == X:
        return 1
    elif won == O:
        return -1
    elif won == None:
        return 0


def minimax(board):
    """
    Returns the optimal action for the current player on the board.
    """
    def max_value(board):
        v = -inf
        v_action = None
        if terminal(board):
            return utility(board), v_action


        for action in actions(board):
            min_val =  min_value(result(board, action))[0]
            if v < min_val:
                v = min_val
                v_action = action

        return (v, v_action)

    def min_value(board):
        v = inf
        v_action = None
        if terminal(board):
            return utility(board), v_action

        for action in actions(board):
            max_val = max_value(result(board, action))[0]
            if v > max_val:
                v = max_val
                v_action = action

        return (v, v_action)


    # return None if it's terminal board
    if terminal(board):
        return None

    # get current player
    current_player = player(board)

    if current_player == X:
        optimal_action = max_value(board)[1]
    elif current_player == O:
        optimal_action = min_value(board)[1]

    return optimal_action
